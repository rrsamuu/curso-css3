/*
-Nos permite definir cómo se comporta una caja.
-De forma natural existen elementos en línea y elementos en bloque
-Los valores de esta propiedad son:
    inline – Establece que la caja se comporta como si fuera un elemento en línea.
        No admite dimensiones (width y height)
        Admiten margin y padding pero no afecta al flujo vertical,sólo al horizontal
    block - Establece que la caja se comporta como si fuera un elemento en bloque.
        Admite dimensiones (width y height)
        Admiten margin y padding y afecta al flujo vertical, sólo al horizontal.
    inline-block - Se comporta como un elemento en línea pero acepta width y heigth
    
    none – Oculta el elemento pero se sigue renderizando
    table – Imita el comportamiento de una tabla
    list-item - Imita el comportamiento de una lista
    CSS3
    flex – maquetar componentes
    grid – maquetar layout
*/

.inline{
    background: lime;
    /* de linea lo convierte a bloque */
    /* display: inline-block;
    margin-bottom: 2em;
    height: 400px; */

    /* no se guarda su espacio en el flujo */
    display: none;
}

.block{
    background: yellow;
    margin: 0;
}

/* ---------------------------------- */
/* PSEUDOELEMENTOS*/

/*
Se utilizan para dar estilo a partes específicas de un elemento.
La sintaxis es selector::pseudo-element{ estilos }
Existen 5 pseudoelementos:
    ::first-letter (Elementos de bloque)
    ::first-line (Elementos de bloque)
    ::selection (Retirado de la especificación)
    ::before
    ::after
        La propiedad content es obligatoria
        Son elementos de línea por defecto
        Son hijos del elemento al que pertenecen
*/

.title_pe::first-letter{
    color: red;
    font-size: 2em;
}

.text_pe::first-line{
    font-size: 2em;
    color:blue;
}

.inline_pe::first-letter{
    color: red;
    font-size: 2em;
}
/* seleccion manual */
.text_pe::selection{
    color: lime;
    background: red;
}

.dolar_pe::before, .dolar_pe::after{
    content: '';
    display: block;
    width: 20px;
    height: 20px;
    background: red;
}

/* ---------------------------------- */
/* PSEUDOCLASES pat1*/

/*
Dynamic
    :link (links) - Link no visitado
    :visited (links) - Link visitado
    :active (links) - El momento del click
    :hover - Al poner el mouse sobre el elemento
    :focus - Cuando el elemento tiene el foco
Target
    :target - Elemento es objetivo de un marcador o ancla
Language
    :lang() - Elemento que contiene el atributo lang que especifiquemos
*/


    /* ===Ejercicios PSEUDOCLASES I=== */
        .link:link {
            color: red;
        }
        .link:visited {
            color: chartreuse
        }
        .link:active {
            color: cyan;
            background: red;
        }
        .title:hover {
            color: blueviolet;
        }
        .button {
            text-decoration: none;
            display: inline-block;
            background: red;
            padding: .5em;
            border-radius: 10px;
            color: #FFF;
        }
        .button:active {
            transform: scale(.9)
        }
        .button:hover {
            color: red;
            background: #fff;
            border: 1px solid;
            border-radius: 10px;
        }
        .input:focus {
            background: green;
        }
        .menu {
            background: lightblue;
            display: block;
            padding: 1em;
            text-decoration: none;
            text-align: center;
            position: fixed;
            width: 100%;
            top: 0;
            left: 0;
        }
        .text {
            margin-top: 500px;
            margin-bottom: 500px;
        }
        .text:target {
            padding-top: 75px;
        }
        .span {
            display: block;
        }
        .span:lang(en) {
            color: red;
        }
        .span:lang(es) {
            color: blue;
        }
       
/* ---------------------------------- */
/* PSEUDOCLASES pat2*/

.input_pc,
.label_pc {
    display: block;
}

/*
UI States
    :enabled
    :disabled
    :checked
    :in-range
    :out-of-range
    :required
    :optional
    :valid
    :invalid
    :read-only
    :read-write
*/

.input_pc:enabled {
    background: red;
}

.input_pc:disabled {
    background: yellow;
    border: none;
}

.input_pc:checked + label{
    font-size: 2em;
}

.input_pc:in-range{
    background: green;
}

.input_pc:out-of-range{
    background: blue;
}

.input_pc:optional{
    background: purple;
}

.input_pc:required{
    background: lightcoral;
}

.input_pc:valid{
    background: green;
}

.input_pc:invalid{
    background: red;
}

/*
Structural
    :root
    :nth-child()
    :nth-last-child()
    :nth-of-type()
    :nth-last-of-type()
    :first-child
    :last-child
    :first-of-type
    :last-of-type
    :only-child
    :only-of-type
    :empty
Negation
    :not()
*/

/* ---------------------------------- */
/* PSEUDOCLASES pat3*/

/*
Structural
    :root - Representa la raiz del documento (html) usando una pseudoclase tenemos más especificidad que si usáramos html
    :empty - Esta pseudoclase se aplica para los elementos vacios, es decir, etiquetas que no tienen contenido
    
    -child
        :first-child - Selecciona al primer hijo (independientemente del tipo de etiqueta)
        :last-child - Selecciona al ultimo hijo (independientemente del tipo de etiqueta)
        :nth-child(n) - Selecciona al hijo n(independientemente del tipo de etiqueta)
        :nth-last-child(n) Selecciona al hijo n empezando a contar desde el último (independientemente del tipo de etiqueta)
        :only-child Selecciona al hijo unico(independientemente del tipo de etiqueta)
    
    -type
        :first-of-type
        :last-of-type
        :nth-of-type()
        :nth-last-of-type()
        :only-of-type
        
    Valores posibles:
        odd - Impares
        even - Pares
        numeros enteros - 2,3,4...
        equaciones (1n,3n,4n+1,n+4,...)
            n es un multiplicador va de 0 hasta que se quede sin elementos
    
Negation
    :not() - Selecciona al elemento que no cumpla la condición, se puede poner cualquier selector salvo otro :not
*/

.paragraph{
    padding: .5em;
    /* background:lightblue; */
}

.paragraph:empty{
    all:unset;
}

.paragraph:first-child {
    background: red;
}

.paragraph:last-child {
    background: blue;
}

/* formulas matematicas */
.paragraph:nth-child(odd) {
    background: lightgreen;
}

.paragraph:nth-child(even) {
    background: lightcoral;
}

.paragraph:nth-child(3) {
    background: lightseagreen;
}

/* n primero vale 0, después 1, después 2 y por último 3*/
.paragraph:nth-child(3n) {
    background: yellow;
}


.paragraph:nth-child(3n + 1) {
    background: green;
}

/* es lo mimo que arriba */
/* .paragraph:nth-child(n + 4) {
    background: purple;
} */

/* empieza a contar desde el ultimo */
.paragraph:nth-last-child(4) {
    background: purple;
}

/* Cuando solo exite un elemento */
.paragraph:only-child{
    background:peru;
}

.paragraph:first-of-type{
    background: red;
}

/* todos menos al que se indique */
/* .paragraph:not(.first) {
    background: green;
} */